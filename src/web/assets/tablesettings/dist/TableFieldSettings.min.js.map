{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./TableFieldSettings.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","$","Craft","TableFieldSettings","Garnish","Base","extend","columnsTableName","defaultsTableName","columnsData","columnsTableId","defaultsTableId","columnsTableInputPath","defaultsTableInputPath","defaults","columnSettings","dropdownSettingsHtml","dropdownSettingsCols","columnsTable","defaultsTable","init","this","formatInputId","filterArray","split","initColumnsTable","initDefaultsTable","ColumnTable","rowIdPrefix","defaultValues","type","onAddRow","onAddColumn","onDeleteRow","reconstructDefaultsTable","EditableTable","$tr","initColumnSettingInputs","$container","$textareas","find","addListener","expandPostArray","getPostData","$tbody","length","colId","rowObj","data","options","theadHtml","heading","$table","id","append","appendTo","rowId","createRow","replaceWith","destroy","fieldSettings","baseName","columns","settings","base","initialize","sorter","onSortChange","createRowObj","Row","$typeSelect","$settingsBtn","settingsModal","optionsTable","table","tr","$typeCell","$typeSelectContainer","role","closest","handleTypeChange","val","removeClass","addClass","showSettingsModal","ev","show","Math","floor","random","$modal","$bod","$body","html","replace","handleOptionsRowChange","row","addRow","label","prop","$closeButton","class","text","Modal","onHide","handleSettingsModalHide","hide","setTimeout","first","trigger","updateSizeAndPosition","$rows","$row","eq","push","default","handleFormSubmit","JSON","stringify","currentTarget","jQuery"],"mappings":"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","file":"TableFieldSettings.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    Craft.TableFieldSettings = Garnish.Base.extend({\n        columnsTableName: null,\n        defaultsTableName: null,\n        columnsData: null,\n        columnsTableId: null,\n        defaultsTableId: null,\n        columnsTableInputPath: null,\n        defaultsTableInputPath: null,\n\n        defaults: null,\n        columnSettings: null,\n\n        dropdownSettingsHtml: null,\n        dropdownSettingsCols: null,\n\n        columnsTable: null,\n        defaultsTable: null,\n\n        init: function(columnsTableName, defaultsTableName, columnsData, defaults, columnSettings, dropdownSettingsHtml, dropdownSettingsCols) {\n            this.columnsTableName = columnsTableName;\n            this.defaultsTableName = defaultsTableName;\n            this.columnsData = columnsData;\n\n            this.columnsTableId = Craft.formatInputId(this.columnsTableName);\n            this.defaultsTableId = Craft.formatInputId(this.defaultsTableName);\n\n            this.columnsTableInputPath = Craft.filterArray(this.columnsTableName.split(/[\\[\\]]+/));\n            this.defaultsTableInputPath = Craft.filterArray(this.defaultsTableName.split(/[\\[\\]]+/));\n\n            this.defaults = defaults;\n            this.columnSettings = columnSettings;\n\n            this.dropdownSettingsHtml = dropdownSettingsHtml;\n            this.dropdownSettingsCols = dropdownSettingsCols;\n\n            this.initColumnsTable();\n            this.initDefaultsTable();\n        },\n\n        initColumnsTable: function() {\n            this.columnsTable = new ColumnTable(this, this.columnsTableId, this.columnsTableName, this.columnSettings, {\n                rowIdPrefix: 'col',\n                defaultValues: {\n                    type: 'singleline'\n                },\n                onAddRow: this.onAddColumn.bind(this),\n                onDeleteRow: this.reconstructDefaultsTable.bind(this)\n            });\n        },\n\n        initDefaultsTable: function() {\n            this.defaultsTable = new Craft.EditableTable(this.defaultsTableId, this.defaultsTableName, this.columnsData, {\n                rowIdPrefix: 'row'\n            });\n        },\n\n        onAddColumn: function($tr) {\n            this.reconstructDefaultsTable();\n            this.initColumnSettingInputs($tr);\n        },\n\n        initColumnSettingInputs: function($container) {\n            var $textareas = $container.find('td:first-child textarea, td:nth-child(3) textarea');\n            this.addListener($textareas, 'input', 'reconstructDefaultsTable');\n        },\n\n        reconstructDefaultsTable: function() {\n            this.columnsData = Craft.expandPostArray(Garnish.getPostData(this.columnsTable.$tbody));\n            var defaults = Craft.expandPostArray(Garnish.getPostData(this.defaultsTable.$tbody));\n\n            var i, key;\n\n            for (i = 0; i < this.columnsTableInputPath.length; i++) {\n                key = this.columnsTableInputPath[i];\n                this.columnsData = this.columnsData[key];\n            }\n\n            // Add in the dropdown options\n            for (let colId in this.columnsData) {\n                if (this.columnsData.hasOwnProperty(colId) && this.columnsData[colId].type === 'select') {\n                    var rowObj = this.columnsTable.$tbody.find('tr[data-id=\"' + colId + '\"]').data('editable-table-row');\n                    this.columnsData[colId].options = rowObj.options || [];\n                }\n            }\n\n            for (i = 0; i < this.defaultsTableInputPath.length; i++) {\n                key = this.defaultsTableInputPath[i];\n\n                if (typeof defaults[key] === 'undefined') {\n                    defaults = {};\n                    break;\n                } else {\n                    defaults = defaults[key];\n                }\n            }\n\n            var theadHtml = '<thead>' +\n                '<tr>';\n\n            for (let colId in this.columnsData) {\n                if (!this.columnsData.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                theadHtml += '<th scope=\"col\">' + (this.columnsData[colId].heading ? this.columnsData[colId].heading : '&nbsp;') + '</th>';\n            }\n\n            theadHtml += '<th colspan=\"2\"></th>' +\n                '</tr>' +\n                '</thead>';\n\n            var $table = $('<table/>', {\n                id: this.defaultsTableId,\n                'class': 'editable fullwidth'\n            }).append(theadHtml);\n\n            var $tbody = $('<tbody/>').appendTo($table);\n\n            for (var rowId in defaults) {\n                if (!defaults.hasOwnProperty(rowId)) {\n                    continue;\n                }\n\n                Craft.EditableTable.createRow(rowId, this.columnsData, this.defaultsTableName, defaults[rowId]).appendTo($tbody);\n            }\n\n            this.defaultsTable.$table.replaceWith($table);\n            this.defaultsTable.destroy();\n            delete this.defaultsTable;\n            this.initDefaultsTable();\n        }\n    });\n\n    var ColumnTable = Craft.EditableTable.extend({\n        fieldSettings: null,\n\n        init: function(fieldSettings, id, baseName, columns, settings) {\n            this.fieldSettings = fieldSettings;\n            this.base(id, baseName, columns, settings);\n        },\n\n        initialize: function() {\n            if (!this.base()) {\n                return false;\n            }\n\n            this.fieldSettings.initColumnSettingInputs(this.$tbody);\n            this.sorter.settings.onSortChange = this.fieldSettings.reconstructDefaultsTable.bind(this.fieldSettings);\n            return true;\n        },\n\n        createRowObj: function($tr) {\n            return new ColumnTable.Row(this, $tr);\n        }\n    });\n\n    ColumnTable.Row = Craft.EditableTable.Row.extend({\n        $typeSelect: null,\n        $settingsBtn: null,\n\n        options: null,\n        settingsModal: null,\n        optionsTable: null,\n\n        init: function(table, tr) {\n            this.base(table, tr);\n\n            if (this.table.fieldSettings.columnsData[this.id]) {\n                this.options = this.table.fieldSettings.columnsData[this.id].options || null;\n            }\n\n            var $typeCell = this.$tr.find('td:nth-child(4)');\n            var $typeSelectContainer = $typeCell.find('.select');\n            this.$settingsBtn = $typeCell.find('.settings');\n\n            if (!this.$settingsBtn.length) {\n                this.$settingsBtn = $('<a/>', {\n                    'class': 'settings light invisible',\n                    role: 'button',\n                    'data-icon': 'settings'\n                });\n                $('<div/>', {'class': 'flex flex-no-wrap'})\n                    .appendTo($typeCell)\n                    .append($typeSelectContainer)\n                    .append(this.$settingsBtn);\n            }\n\n            this.$typeSelect = $typeSelectContainer.find('select');\n            this.addListener(this.$typeSelect, 'change', 'handleTypeChange');\n            this.addListener(this.$settingsBtn, 'click', 'showSettingsModal');\n\n            this.addListener(this.$tr.closest('form'), 'submit', 'handleFormSubmit');\n        },\n\n        handleTypeChange: function() {\n            if (this.$typeSelect.val() === 'select') {\n                this.$settingsBtn.removeClass('invisible');\n            } else {\n                this.$settingsBtn.addClass('invisible');\n            }\n\n            this.table.fieldSettings.reconstructDefaultsTable();\n        },\n\n        showSettingsModal: function(ev) {\n            if (!this.settingsModal) {\n                var id = 'dropdownsettingsmodal' + Math.floor(Math.random() * 1000000);\n                var $modal = $('<div/>', {'class': 'modal dropdownsettingsmodal'}).appendTo(Garnish.$bod);\n                var $body = $('<div/>', {'class': 'body'})\n                    .appendTo($modal)\n                    .html(this.table.fieldSettings.dropdownSettingsHtml.replace(/__ID__/g, id));\n\n                this.optionsTable = new Craft.EditableTable(id, '__NAME__', this.table.fieldSettings.dropdownSettingsCols, {\n                    onAddRow: this.handleOptionsRowChange.bind(this),\n                    onDeleteRow: this.handleOptionsRowChange.bind(this)\n                });\n\n                if (this.options && this.options.length) {\n                    var row;\n                    for (var i = 0; i < this.options.length; i++) {\n                        row = this.optionsTable.addRow(false);\n                        row.$tr.find('.option-label textarea').val(this.options[i].label);\n                        row.$tr.find('.option-value textarea').val(this.options[i].value);\n                        row.$tr.find('.option-default input[type=\"checkbox\"]').prop('checked', !!this.options[i].default);\n                    }\n                } else {\n                    this.optionsTable.addRow(false);\n                }\n\n                var $closeButton = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit',\n                    text: Craft.t('app', 'Done')\n                }).appendTo($body);\n\n                this.settingsModal = new Garnish.Modal($modal, {\n                    onHide: this.handleSettingsModalHide.bind(this)\n                });\n\n                this.addListener($closeButton, 'click', function() {\n                    this.settingsModal.hide();\n                });\n            } else {\n                this.settingsModal.show();\n            }\n\n            setTimeout(() => {\n                this.optionsTable.$tbody.find('textarea').first().trigger('focus')\n            }, 100);\n        },\n\n        handleOptionsRowChange: function() {\n            if (this.settingsModal) {\n                this.settingsModal.updateSizeAndPosition();\n            }\n        },\n\n        handleSettingsModalHide: function() {\n            this.options = [];\n            var $rows = this.optionsTable.$table.find('tbody tr');\n            for (var i = 0; i < $rows.length; i++) {\n                let $row = $rows.eq(i);\n                this.options.push({\n                    label: $row.find('.option-label textarea').val(),\n                    value: $row.find('.option-value textarea').val(),\n                    default: $row.find('.option-default input[type=checkbox]').prop('checked')\n                })\n            }\n\n            this.table.fieldSettings.reconstructDefaultsTable();\n        },\n\n        handleFormSubmit: function(ev) {\n            if (this.$typeSelect.val() === 'select') {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: this.table.fieldSettings.columnsTableName + '[' + this.id + '][options]',\n                    value: JSON.stringify(this.options)\n                }).appendTo(ev.currentTarget);\n            }\n        }\n    });\n})(jQuery);\n"],"sourceRoot":""}