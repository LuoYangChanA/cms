{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./MatrixConfigurator.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","$","Craft","MatrixConfigurator","Garnish","Base","extend","fieldTypeInfo","inputNamePrefix","fieldTypeSettingsNamespace","inputIdPrefix","placeholderKey","$container","$blockTypesColumnContainer","$fieldsColumnContainer","$fieldSettingsColumnContainer","$blockTypeItemsOuterContainer","$blockTypeItemsContainer","$fieldItemsContainer","$fieldSettingItemsContainer","$newBlockTypeBtn","$newFieldBtn","blockTypes","selectedBlockType","blockTypeSort","totalNewBlockTypes","_fieldTypeSettingsHtml","_cancelToken","_ignoreFailedRequest","init","this","formatInputId","children","$fieldItemsOuterContainer","$blockTypeItems","length","$item","id","data","BlockType","newMatch","match","parseInt","DragSort","handle","axis","addListener","getFieldTypeInfo","type","addBlockType","getBlockTypeSettingsModal","blockTypeSettingsModal","show","onSubmit","appendTo","applySettings","select","addField","addItems","addFieldToSelectedBlockType","BlockTypeSettingsModal","getFieldTypeSettingsHtml","Promise","resolve","reject","cancel","requestAnimationFrame","axios","CancelToken","source","sendActionRequest","cancelToken","token","namespace","then","response","cp","displayError","Modal","base","$form","$bod","setContainer","$body","$nameField","$nameInputContainer","ui","createTextField","label","instructions","find","$nameInput","$nameErrorList","hide","$handleField","$handleInputContainer","class","maxlength","$handleInput","$handleErrorList","$deleteBtn","$buttons","$cancelBtn","text","$submitBtn","handleGenerator","HandleGenerator","onFormSubmit","ev","preventDefault","visible","listening","updateTarget","trim","val","shake","onDeleteClick","confirm","onDelete","errors","stopListening","startListening","addClass","removeClass","displayErrors","isMobileBrowser","setTimeout","trigger","attr","$input","$errorList","remove","configurator","$nameLabel","$handleLabel","$nameHiddenInput","$handleHiddenInput","$settingsBtn","$fieldSettingsContainer","fields","selectedField","fieldSort","totalNewFields","fieldSettings","$nameContainer","insertBefore","$fieldItems","$fieldItem","Field","onSortChange","$items","field","deselect","$win","showSettings","selfDestruct","blockType","selectedFieldType","initializedFieldTypeSettings","$requiredCheckbox","$typeSelect","$translationSettingsContainer","$typeSettingsContainer","$widthInput","fieldTypeSettingsTemplates","isNew","widthSlider","getDefaultFieldSettings","setFieldType","SlidePicker","min","max","step","valueLabel","width","pct","onChange","insertAfter","updateNameLabel","html","escapeHtml","updateHandleLabel","updateRequiredIcon","prop","onTypeSelectChange","updateTranslationMethodSettings","detach","getFieldTypeSettings","fresh","$settings","headHtml","footHtml","append","initUiElements","appendHeadHtml","appendFootHtml","settingsHtml","getParsedFieldTypeHtml","noop","replace","RegExp","required","createTextareaField","$fieldset","createCheckboxField","checked","fieldTypeOptions","push","createSelectField","options","isMultiSite","toggle","targetPrefix","$translationKeyFormatContainer","confirmDelete","jQuery"],"mappings":"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","file":"MatrixConfigurator.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Matrix configurator class\n     */\n    Craft.MatrixConfigurator = Garnish.Base.extend({\n        fieldTypeInfo: null,\n\n        inputNamePrefix: null,\n        fieldTypeSettingsNamespace: null,\n        inputIdPrefix: null,\n        placeholderKey: null,\n\n        $container: null,\n\n        $blockTypesColumnContainer: null,\n        $fieldsColumnContainer: null,\n        $fieldSettingsColumnContainer: null,\n\n        $blockTypeItemsOuterContainer: null,\n        $blockTypeItemsContainer: null,\n        $fieldItemsContainer: null,\n        $fieldSettingItemsContainer: null,\n\n        $newBlockTypeBtn: null,\n        $newFieldBtn: null,\n\n        blockTypes: null,\n        selectedBlockType: null,\n        blockTypeSort: null,\n        totalNewBlockTypes: 0,\n\n        _fieldTypeSettingsHtml: null,\n        _cancelToken: null,\n        _ignoreFailedRequest: false,\n\n        init: function(fieldTypeInfo, inputNamePrefix, fieldTypeSettingsNamespace, placeholderKey) {\n            this.fieldTypeInfo = fieldTypeInfo;\n            this.inputNamePrefix = inputNamePrefix;\n            this.fieldTypeSettingsNamespace = fieldTypeSettingsNamespace;\n            this.inputIdPrefix = Craft.formatInputId(this.inputNamePrefix);\n            this.placeholderKey = placeholderKey;\n\n            this.$container = $('#' + this.inputIdPrefix + '-matrix-configurator:first .input:first');\n\n            this.$blockTypesColumnContainer = this.$container.children('.block-types').children();\n            this.$fieldsColumnContainer = this.$container.children('.mc-fields').children();\n            this.$fieldSettingsColumnContainer = this.$container.children('.mc-field-settings').children();\n\n            this.$blockTypeItemsOuterContainer = this.$blockTypesColumnContainer.children('.mc-col-items');\n            this.$blockTypeItemsContainer = this.$blockTypeItemsOuterContainer.children('.mc-blocktypes');\n            this.$fieldItemsOuterContainer = this.$fieldsColumnContainer.children('.mc-col-items');\n            this.$fieldSettingItemsContainer = this.$fieldSettingsColumnContainer.children('.mc-col-items');\n\n            this.$newBlockTypeBtn = this.$blockTypeItemsOuterContainer.children('.btn');\n            this.$newFieldBtn = this.$fieldItemsOuterContainer.children('.btn');\n\n            this._fieldTypeSettingsHtml = {};\n\n            // Find the existing block types\n            this.blockTypes = {};\n\n            var $blockTypeItems = this.$blockTypeItemsContainer.children();\n\n            for (var i = 0; i < $blockTypeItems.length; i++) {\n                var $item = $($blockTypeItems[i]),\n                    id = $item.data('id');\n\n                this.blockTypes[id] = new BlockType(this, $item);\n\n                // Is this a new block type?\n                var newMatch = (typeof id === 'string' && id.match(/new(\\d+)/));\n\n                if (newMatch && newMatch[1] > this.totalNewBlockTypes) {\n                    this.totalNewBlockTypes = parseInt(newMatch[1]);\n                }\n            }\n\n            this.blockTypeSort = new Garnish.DragSort($blockTypeItems, {\n                handle: '.move',\n                axis: 'y'\n            });\n\n            this.addListener(this.$newBlockTypeBtn, 'click', 'addBlockType');\n            this.addListener(this.$newFieldBtn, 'click', 'addFieldToSelectedBlockType');\n        },\n\n        getFieldTypeInfo: function(type) {\n            for (var i = 0; i < this.fieldTypeInfo.length; i++) {\n                if (this.fieldTypeInfo[i].type === type) {\n                    return this.fieldTypeInfo[i];\n                }\n            }\n        },\n\n        addBlockType: function() {\n            this.getBlockTypeSettingsModal();\n\n            this.blockTypeSettingsModal.show();\n\n            this.blockTypeSettingsModal.onSubmit = (name, handle) => {\n                this.totalNewBlockTypes++;\n                var id = 'new' + this.totalNewBlockTypes;\n\n                var $item = $(\n                    '<div class=\"matrixconfigitem mci-blocktype\" data-id=\"' + id + '\">' +\n                    '<div class=\"mci-name\">' +\n                    '<h4></h4>' +\n                    '<div class=\"smalltext light code\"></div>' +\n                    '</div>' +\n                    '<a class=\"settings icon\" title=\"' + Craft.t('app', 'Settings') + '\"></a>' +\n                    '<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\"></a>' +\n                    '<input class=\"hidden\" name=\"' + this.inputNamePrefix + '[blockTypes][' + id + '][name]\">' +\n                    '<input class=\"hidden\" name=\"' + this.inputNamePrefix + '[blockTypes][' + id + '][handle]\">' +\n                    '</div>'\n                ).appendTo(this.$blockTypeItemsContainer);\n\n                this.blockTypes[id] = new BlockType(this, $item);\n                this.blockTypes[id].applySettings(name, handle);\n                this.blockTypes[id].select();\n                this.blockTypes[id].addField();\n\n                this.blockTypeSort.addItems($item);\n            };\n        },\n\n        addFieldToSelectedBlockType: function() {\n            if (this.selectedBlockType) {\n                this.selectedBlockType.addField();\n            }\n        },\n\n        getBlockTypeSettingsModal: function() {\n            if (!this.blockTypeSettingsModal) {\n                this.blockTypeSettingsModal = new BlockTypeSettingsModal();\n            }\n\n            return this.blockTypeSettingsModal;\n        },\n\n        getFieldTypeSettingsHtml: function(type) {\n            return new Promise((resolve, reject) => {\n                if (typeof this._fieldTypeSettingsHtml[type] !== 'undefined') {\n                    resolve(this._fieldTypeSettingsHtml[type]);\n                    return;\n                }\n\n                // Cancel the current request\n                if (this._cancelToken) {\n                    this._ignoreFailedRequest = true;\n                    this._cancelToken.cancel();\n                    Garnish.requestAnimationFrame(() => {\n                        this._ignoreFailedRequest = false;\n                    });\n                }\n\n                // Create a cancel token\n                this._cancelToken = axios.CancelToken.source();\n\n                Craft.sendActionRequest('POST', 'fields/render-settings', {\n                    cancelToken: this._cancelToken.token,\n                    data: {\n                        type: type,\n                        namespace: this.fieldTypeSettingsNamespace,\n                    }\n                }).then(response => {\n                    this._fieldTypeSettingsHtml[type] = response.data;\n                    resolve(response.data);\n                }).catch(() => {\n                    if (!this._ignoreFailedRequest) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                    reject();\n                });\n            });\n        },\n    });\n\n    /**\n     * Block type settings modal class\n     */\n    var BlockTypeSettingsModal = Garnish.Modal.extend({\n        init: function() {\n            this.base();\n\n            this.$form = $('<form class=\"modal fitted\"/>').appendTo(Garnish.$bod);\n            this.setContainer(this.$form);\n\n            this.$body = $('<div class=\"body\"/>').appendTo(this.$form);\n            let $nameField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Name'),\n                instructions: Craft.t('app', 'What this block type will be called in the control panel.'),\n            }).appendTo(this.$body);\n            let $nameInputContainer = $nameField.find('.input');\n            this.$nameInput = $nameInputContainer.find('.text');\n            this.$nameErrorList = $('<ul class=\"errors\"/>').appendTo($nameInputContainer).hide();\n            let $handleField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Handle'),\n                instructions: Craft.t('app', 'How you’ll refer to this block type in the templates.'),\n                class: 'code',\n                maxlength: 47,\n            }).appendTo(this.$body);\n            let $handleInputContainer = $handleField.find('.input');\n            this.$handleInput = $handleInputContainer.find('.text');\n            this.$handleErrorList = $('<ul class=\"errors\"/>').appendTo($handleInputContainer).hide();\n            this.$deleteBtn = $('<a class=\"error left hidden\" style=\"line-height: 30px;\">' + Craft.t('app', 'Delete') + '</a>').appendTo(this.$body);\n            this.$buttons = $('<div class=\"buttons right\" style=\"margin-top: 0;\"/>').appendTo(this.$body);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo(this.$buttons);\n            this.$submitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n            }).appendTo(this.$buttons);\n\n            this.handleGenerator = new Craft.HandleGenerator(this.$nameInput, this.$handleInput);\n\n            this.addListener(this.$cancelBtn, 'click', 'hide');\n            this.addListener(this.$form, 'submit', 'onFormSubmit');\n            this.addListener(this.$deleteBtn, 'click', 'onDeleteClick');\n        },\n\n        onFormSubmit: function(ev) {\n            ev.preventDefault();\n\n            // Prevent multi form submits with the return key\n            if (!this.visible) {\n                return;\n            }\n\n            if (this.handleGenerator.listening) {\n                // Give the handle a chance to catch up with the input\n                this.handleGenerator.updateTarget();\n            }\n\n            // Basic validation\n            var name = Craft.trim(this.$nameInput.val()),\n                handle = Craft.trim(this.$handleInput.val());\n\n            if (!name || !handle) {\n                Garnish.shake(this.$form);\n            } else {\n                this.hide();\n                this.onSubmit(name, handle);\n            }\n        },\n\n        onDeleteClick: function() {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this block type?'))) {\n                this.hide();\n                this.onDelete();\n            }\n        },\n\n        show: function(name, handle, errors) {\n            this.$nameInput.val(typeof name === 'string' ? name : '');\n            this.$handleInput.val(typeof handle === 'string' ? handle : '');\n\n            if (!handle) {\n                this.handleGenerator.startListening();\n            } else {\n                this.handleGenerator.stopListening();\n            }\n\n            if (typeof name === 'undefined') {\n                this.$deleteBtn.addClass('hidden');\n                this.$submitBtn.text(Craft.t('app', 'Create'));\n            } else {\n                this.$deleteBtn.removeClass('hidden');\n                this.$submitBtn.text(Craft.t('app', 'Apply'));\n            }\n\n            this.displayErrors('name', (errors ? errors.name : null));\n            this.displayErrors('handle', (errors ? errors.handle : null));\n\n            if (!Garnish.isMobileBrowser()) {\n                setTimeout(() => {\n                    this.$nameInput.trigger('focus');\n                }, 100);\n            }\n\n            this.base();\n        },\n\n        displayErrors: function(attr, errors) {\n            var $input = this['$' + attr + 'Input'],\n                $errorList = this['$' + attr + 'ErrorList'];\n\n            $errorList.children().remove();\n\n            if (errors) {\n                $input.addClass('error');\n                $errorList.show();\n\n                for (var i = 0; i < errors.length; i++) {\n                    $('<li/>').text(errors[i]).appendTo($errorList);\n                }\n            } else {\n                $input.removeClass('error');\n                $errorList.hide();\n            }\n        }\n    });\n\n    /**\n     * Block type class\n     */\n    var BlockType = Garnish.Base.extend({\n        configurator: null,\n        id: null,\n        errors: null,\n\n        inputNamePrefix: null,\n        inputIdPrefix: null,\n\n        $item: null,\n        $nameLabel: null,\n        $handleLabel: null,\n        $nameHiddenInput: null,\n        $handleHiddenInput: null,\n        $settingsBtn: null,\n        $fieldItemsContainer: null,\n        $fieldSettingsContainer: null,\n\n        fields: null,\n        selectedField: null,\n        fieldSort: null,\n        totalNewFields: 0,\n        fieldSettings: null,\n\n        init: function(configurator, $item) {\n            this.configurator = configurator;\n            this.$item = $item;\n            this.id = this.$item.data('id');\n            this.errors = this.$item.data('errors');\n\n            this.inputNamePrefix = this.configurator.inputNamePrefix + '[blockTypes][' + this.id + ']';\n            this.inputIdPrefix = this.configurator.inputIdPrefix + '-blockTypes-' + this.id;\n\n            let $nameContainer = this.$item.children('.mci-name');\n            this.$nameLabel = $nameContainer.children('h4');\n            this.$handleLabel = $nameContainer.children('.smalltext');\n            this.$nameHiddenInput = this.$item.find('input[name$=\"[name]\"]:first');\n            this.$handleHiddenInput = this.$item.find('input[name$=\"[handle]\"]:first');\n            this.$settingsBtn = this.$item.find('.settings');\n\n            // Find the field items container if it exists, otherwise create it\n            this.$fieldItemsContainer = this.configurator.$fieldItemsOuterContainer.children('[data-id=\"' + this.id + '\"]:first');\n\n            if (!this.$fieldItemsContainer.length) {\n                this.$fieldItemsContainer = $('<div data-id=\"' + this.id + '\"/>').insertBefore(this.configurator.$newFieldBtn);\n            }\n\n            // Find the field settings container if it exists, otherwise create it\n            this.$fieldSettingsContainer = this.configurator.$fieldSettingItemsContainer.children('[data-id=\"' + this.id + '\"]:first');\n\n            if (!this.$fieldSettingsContainer.length) {\n                this.$fieldSettingsContainer = $('<div data-id=\"' + this.id + '\"/>').appendTo(this.configurator.$fieldSettingItemsContainer);\n            }\n\n            // Find the existing fields\n            this.fields = {};\n\n            var $fieldItems = this.$fieldItemsContainer.children();\n\n            for (var i = 0; i < $fieldItems.length; i++) {\n                var $fieldItem = $($fieldItems[i]),\n                    id = $fieldItem.data('id');\n\n                this.fields[id] = new Field(this.configurator, this, $fieldItem);\n\n                // Is this a new field?\n                var newMatch = (typeof id === 'string' && id.match(/new(\\d+)/));\n\n                if (newMatch && newMatch[1] > this.totalNewFields) {\n                    this.totalNewFields = parseInt(newMatch[1]);\n                }\n            }\n\n            this.addListener(this.$item, 'click', 'select');\n            this.addListener(this.$settingsBtn, 'click', 'showSettings');\n\n            this.fieldSort = new Garnish.DragSort($fieldItems, {\n                handle: '.move',\n                axis: 'y',\n                onSortChange: () => {\n                    // Adjust the field setting containers to match the new sort order\n                    for (var i = 0; i < this.fieldSort.$items.length; i++) {\n                        var $item = $(this.fieldSort.$items[i]),\n                            id = $item.data('id'),\n                            field = this.fields[id];\n\n                        field.$fieldSettingsContainer.appendTo(this.$fieldSettingsContainer);\n                    }\n                },\n            });\n        },\n\n        select: function() {\n            if (this.configurator.selectedBlockType === this) {\n                return;\n            }\n\n            if (this.configurator.selectedBlockType) {\n                this.configurator.selectedBlockType.deselect();\n            }\n\n            this.configurator.$fieldsColumnContainer.removeClass('hidden');\n            this.$fieldItemsContainer.removeClass('hidden');\n            this.$item.addClass('sel');\n            this.configurator.selectedBlockType = this;\n            Garnish.$win.trigger('resize');\n        },\n\n        deselect: function() {\n            this.$item.removeClass('sel');\n            this.configurator.$fieldsColumnContainer.addClass('hidden');\n            this.$fieldItemsContainer.addClass('hidden');\n            this.$fieldSettingsContainer.addClass('hidden');\n            this.configurator.selectedBlockType = null;\n\n            if (this.selectedField) {\n                this.selectedField.deselect();\n            }\n\n            Garnish.$win.trigger('resize');\n        },\n\n        showSettings: function() {\n            var blockTypeSettingsModal = this.configurator.getBlockTypeSettingsModal();\n            blockTypeSettingsModal.show(this.$nameHiddenInput.val(), this.$handleHiddenInput.val(), this.errors);\n            blockTypeSettingsModal.onSubmit = this.applySettings.bind(this);\n            blockTypeSettingsModal.onDelete = this.selfDestruct.bind(this);\n        },\n\n        applySettings: function(name, handle) {\n            if (this.errors) {\n                this.errors = null;\n                this.$settingsBtn.removeClass('error');\n            }\n\n            this.$nameLabel.text(name);\n            this.$handleLabel.text(handle);\n            this.$nameHiddenInput.val(name);\n            this.$handleHiddenInput.val(handle);\n        },\n\n        addField: function() {\n            this.totalNewFields++;\n            var id = 'new' + this.totalNewFields;\n\n            var $item = $(\n                '<div class=\"matrixconfigitem mci-field\" data-id=\"' + id + '\">' +\n                '<div class=\"mci-name\">' +\n                '<h4><em class=\"light\">' + Craft.t('app', '(blank)') + '</em></h4>' +\n                '<div class=\"smalltext light code\"></div>' +\n                '</div>' +\n                '<div class=\"actions\">' +\n                '<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\"></a>' +\n                '</div>' +\n                '</div>'\n            ).appendTo(this.$fieldItemsContainer);\n\n            this.fields[id] = new Field(this.configurator, this, $item);\n            this.fields[id].select();\n\n            this.fieldSort.addItems($item);\n        },\n\n        selfDestruct: function() {\n            this.deselect();\n            this.$item.remove();\n            this.$fieldItemsContainer.remove();\n            this.$fieldSettingsContainer.remove();\n\n            this.configurator.blockTypes[this.id] = null;\n            delete this.configurator.blockTypes[this.id];\n        }\n    });\n\n    var Field = Garnish.Base.extend({\n        configurator: null,\n        blockType: null,\n        id: null,\n\n        inputNamePrefix: null,\n        inputIdPrefix: null,\n\n        selectedFieldType: null,\n        initializedFieldTypeSettings: null,\n\n        $item: null,\n        $nameLabel: null,\n        $handleLabel: null,\n\n        $fieldSettingsContainer: null,\n        $nameInput: null,\n        $handleInput: null,\n        $requiredCheckbox: null,\n        $typeSelect: null,\n        $translationSettingsContainer: null,\n        $typeSettingsContainer: null,\n        $widthInput: null,\n        $deleteBtn: null,\n\n        init: function(configurator, blockType, $item) {\n            this.configurator = configurator;\n            this.blockType = blockType;\n            this.$item = $item;\n            this.id = this.$item.data('id');\n\n            this.inputNamePrefix = this.blockType.inputNamePrefix + '[fields][' + this.id + ']';\n            this.inputIdPrefix = this.blockType.inputIdPrefix + '-fields-' + this.id;\n\n            this.initializedFieldTypeSettings = {};\n            this.fieldTypeSettingsTemplates = {};\n\n            let $nameContainer = this.$item.children('.mci-name');\n            this.$nameLabel = $nameContainer.children('h4');\n            this.$handleLabel = $nameContainer.children('.smalltext');\n\n            // Find the field settings container if it exists, otherwise create it\n            this.$fieldSettingsContainer = this.blockType.$fieldSettingsContainer.children('[data-id=\"' + this.id + '\"]:first');\n\n            var isNew = (!this.$fieldSettingsContainer.length);\n\n            if (isNew) {\n                this.$fieldSettingsContainer = this.getDefaultFieldSettings().appendTo(this.blockType.$fieldSettingsContainer);\n            }\n\n            this.$nameInput = $('#' + this.inputIdPrefix + '-name');\n            this.$handleInput = $('#' + this.inputIdPrefix + '-handle');\n            this.$requiredCheckbox = $('#' + this.inputIdPrefix + '-required');\n            this.$typeSelect = $('#' + this.inputIdPrefix + '-type');\n            this.$translationSettingsContainer = $('#' + this.inputIdPrefix + '-translation-settings');\n            this.$typeSettingsContainer = this.$fieldSettingsContainer.children('.mc-fieldtype-settings:first');\n            this.$widthInput = $('#' + this.inputIdPrefix + '-width');\n            this.$deleteBtn = this.$fieldSettingsContainer.children('a.delete:first');\n\n            if (isNew) {\n                this.setFieldType('craft\\\\fields\\\\PlainText');\n            } else {\n                this.selectedFieldType = this.$typeSelect.val();\n                this.initializedFieldTypeSettings[this.selectedFieldType] = this.$typeSettingsContainer.children();\n            }\n\n            if (!this.$handleInput.val()) {\n                new Craft.HandleGenerator(this.$nameInput, this.$handleInput);\n            }\n\n            this.addListener(this.$item, 'click', 'select');\n            this.addListener(this.$nameInput, 'input', 'updateNameLabel');\n            this.addListener(this.$handleInput, 'input', 'updateHandleLabel');\n            this.addListener(this.$requiredCheckbox, 'change', 'updateRequiredIcon');\n            this.addListener(this.$typeSelect, 'change', 'onTypeSelectChange');\n            this.addListener(this.$deleteBtn, 'click', 'confirmDelete');\n\n            let widthSlider = new Craft.SlidePicker(this.$widthInput.val() || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.$widthInput.val(width);\n                }\n            });\n            widthSlider.$container.insertAfter($nameContainer);\n        },\n\n        select: function() {\n            if (this.blockType.selectedField === this) {\n                return;\n            }\n\n            if (this.blockType.selectedField) {\n                this.blockType.selectedField.deselect();\n            }\n\n            this.configurator.$fieldSettingsColumnContainer.removeClass('hidden');\n            this.blockType.$fieldSettingsContainer.removeClass('hidden');\n            this.$fieldSettingsContainer.removeClass('hidden');\n            this.$item.addClass('sel');\n            this.blockType.selectedField = this;\n            Garnish.$win.trigger('resize');\n\n            if (!Garnish.isMobileBrowser()) {\n                setTimeout(() => {\n                    this.$nameInput.trigger('focus');\n                }, 100);\n            }\n        },\n\n        deselect: function() {\n            this.$item.removeClass('sel');\n            this.configurator.$fieldSettingsColumnContainer.addClass('hidden');\n            this.blockType.$fieldSettingsContainer.addClass('hidden');\n            this.$fieldSettingsContainer.addClass('hidden');\n            this.blockType.selectedField = null;\n            Garnish.$win.trigger('resize');\n        },\n\n        updateNameLabel: function() {\n            var val = this.$nameInput.val();\n            this.$nameLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>'));\n        },\n\n        updateHandleLabel: function() {\n            this.$handleLabel.html(Craft.escapeHtml(this.$handleInput.val()));\n        },\n\n        updateRequiredIcon: function() {\n            if (this.$requiredCheckbox.prop('checked')) {\n                this.$nameLabel.addClass('mci-required');\n            } else {\n                this.$nameLabel.removeClass('mci-required');\n            }\n        },\n\n        onTypeSelectChange: function() {\n            this.setFieldType(this.$typeSelect.val());\n        },\n\n        setFieldType: function(type) {\n            // Update the Translation Method settings\n            Craft.updateTranslationMethodSettings(type, this.$translationSettingsContainer);\n\n            if (this.selectedFieldType) {\n                this.initializedFieldTypeSettings[this.selectedFieldType].detach();\n            }\n\n            this.selectedFieldType = type;\n            this.$typeSelect.val(type);\n\n            // Show a spinner\n            this.$typeSettingsContainer.html('<div class=\"zilch\"><div class=\"spinner\"></div></div>');\n\n            this.getFieldTypeSettings(type).then(({fresh, $settings, headHtml, footHtml}) => {\n                this.$typeSettingsContainer.html('').append($settings);\n                if (fresh) {\n                    Craft.initUiElements($settings);\n                    Craft.appendHeadHtml(headHtml);\n                    Craft.appendFootHtml(footHtml);\n                }\n\n                Garnish.$win.trigger('resize');\n            }).catch(() => {\n                this.$typeSettingsContainer.html('');\n            });\n        },\n\n        getFieldTypeSettings: function(type) {\n            return new Promise((resolve, reject) => {\n                if (typeof this.initializedFieldTypeSettings[type] !== 'undefined') {\n                    resolve({\n                        fresh: false,\n                        $settings: this.initializedFieldTypeSettings[type],\n                    });\n                    return;\n                }\n\n                this.configurator.getFieldTypeSettingsHtml(type).then(({settingsHtml, headHtml, footHtml}) => {\n                    settingsHtml = this.getParsedFieldTypeHtml(settingsHtml);\n                    headHtml = this.getParsedFieldTypeHtml(headHtml);\n                    footHtml = this.getParsedFieldTypeHtml(footHtml);\n                    let $settings = $('<div/>').html(settingsHtml);\n                    this.initializedFieldTypeSettings[type] = $settings;\n                    resolve({\n                        fresh: true,\n                        $settings: $settings,\n                        headHtml: headHtml,\n                        footHtml: footHtml,\n                    });\n                }).catch($.noop);\n            });\n        },\n\n        getParsedFieldTypeHtml: function(html) {\n            if (typeof html === 'string') {\n                html = html.replace(new RegExp(`__BLOCK_TYPE_${this.configurator.placeholderKey}__`, 'g'), this.blockType.id);\n                html = html.replace(new RegExp(`__FIELD_${this.configurator.placeholderKey}__`, 'g'), this.id);\n            } else {\n                html = '';\n            }\n\n            return html;\n        },\n\n        getDefaultFieldSettings: function() {\n            var $container = $('<div/>', {\n                'data-id': this.id\n            });\n\n            Craft.ui.createTextField({\n                label: Craft.t('app', 'Name'),\n                id: this.inputIdPrefix + '-name',\n                name: this.inputNamePrefix + '[name]'\n            }).appendTo($container);\n\n            Craft.ui.createTextField({\n                label: Craft.t('app', 'Handle'),\n                id: this.inputIdPrefix + '-handle',\n                'class': 'code',\n                name: this.inputNamePrefix + '[handle]',\n                maxlength: 64,\n                required: true\n            }).appendTo($container);\n\n            Craft.ui.createTextareaField({\n                label: Craft.t('app', 'Instructions'),\n                id: this.inputIdPrefix + '-instructions',\n                'class': 'nicetext',\n                name: this.inputNamePrefix + '[instructions]'\n            }).appendTo($container);\n\n            let $fieldset = $('<fieldset/>').appendTo($container);\n\n            Craft.ui.createCheckboxField({\n                label: Craft.t('app', 'This field is required'),\n                id: this.inputIdPrefix + '-required',\n                name: this.inputNamePrefix + '[required]'\n            }).appendTo($fieldset);\n\n            Craft.ui.createCheckboxField({\n                label: Craft.t('app', 'Use this field’s values as search keywords'),\n                id: this.inputIdPrefix + '-searchable',\n                name: this.inputNamePrefix + '[searchable]',\n                checked: false,\n            }).appendTo($fieldset);\n\n            var fieldTypeOptions = [];\n\n            for (var i = 0; i < this.configurator.fieldTypeInfo.length; i++) {\n                fieldTypeOptions.push({\n                    value: this.configurator.fieldTypeInfo[i].type,\n                    label: this.configurator.fieldTypeInfo[i].name\n                });\n            }\n\n            Craft.ui.createSelectField({\n                label: Craft.t('app', 'Field Type'),\n                id: this.inputIdPrefix + '-type',\n                name: this.inputNamePrefix + '[type]',\n                options: fieldTypeOptions,\n                value: 'craft\\\\fields\\\\PlainText'\n            }).appendTo($container);\n\n            if (Craft.isMultiSite) {\n                var $translationSettingsContainer = $('<div/>', {\n                    id: this.inputIdPrefix + '-translation-settings'\n                }).appendTo($container);\n\n                Craft.ui.createSelectField({\n                    label: Craft.t('app', 'Translation Method'),\n                    id: this.inputIdPrefix + '-translation-method',\n                    name: this.inputNamePrefix + '[translationMethod]',\n                    options: [],\n                    value: 'none',\n                    toggle: true,\n                    targetPrefix: this.inputIdPrefix + '-translation-method-'\n                }).appendTo($translationSettingsContainer);\n\n                var $translationKeyFormatContainer = $('<div/>', {\n                    id: this.inputIdPrefix + '-translation-method-custom',\n                    'class': 'hidden'\n                }).appendTo($translationSettingsContainer);\n\n                Craft.ui.createTextField({\n                    label: Craft.t('app', 'Translation Key Format'),\n                    id: this.inputIdPrefix + '-translation-key-format',\n                    name: this.inputNamePrefix + '[translationKeyFormat]'\n                }).appendTo($translationKeyFormatContainer);\n            }\n\n            $('<hr/>').appendTo($container);\n\n            $('<div/>', {\n                'class': 'mc-fieldtype-settings'\n            }).appendTo($container);\n\n            $('<input/>', {\n                type: 'hidden',\n                id: this.inputIdPrefix + '-width',\n                name: this.inputNamePrefix + '[width]',\n                value: '100',\n            }).appendTo($container);\n\n            $('<hr/>').appendTo($container);\n\n            $('<a/>', {\n                'class': 'error delete',\n                text: Craft.t('app', 'Delete')\n            }).appendTo($container);\n\n            return $container;\n        },\n\n        confirmDelete: function() {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this field?'))) {\n                this.selfDestruct();\n            }\n        },\n\n        selfDestruct: function() {\n            this.deselect();\n            this.$item.remove();\n            this.$fieldSettingsContainer.remove();\n\n            this.blockType.fields[this.id] = null;\n            delete this.blockType.fields[this.id];\n        }\n    });\n})(jQuery);\n"],"sourceRoot":""}